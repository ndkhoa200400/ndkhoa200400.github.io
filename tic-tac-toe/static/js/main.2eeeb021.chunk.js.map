{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Square","props","className","isWonMove","onClick","value","Board","i","this","wonSquares","includes","squares","row","cols","size","push","renderSquare","columns","renderColumns","map","renderRows","React","Component","Game","state","history","Array","fill","currentMove","order","stepNumber","xIsNext","isSort","slice","current","length","calculateWinner","setState","concat","step","winner","reverse","status","moves","move","desc","parseInt","jumpTo","turn","handleClick","type","id","onChange","sortMove","htmlFor","Map","handleSubmit","e","alert","isStart","min","placeholder","target","Math","sqrt","j","isWin","position","streak","nextPosition","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2eeeb021.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nfunction Square(props) {\n  return (\n    <button\n      className={`square ${props.isWonMove ? \"won-move\" : null}`}\n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    const wonSquares = this.props.wonSquares;\n    const isWonMove = wonSquares.includes(i);\n\n    return (\n      <Square\n        key={i}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        isWonMove={isWonMove}\n      />\n    );\n  }\n\n  renderColumns(row) {\n    const cols = [];\n    for (let i = 0; i < this.props.size; i++) {\n      cols.push(this.renderSquare(i + row * this.props.size));\n    }\n    return cols;\n  }\n\n  renderRows() {\n    const columns = [];\n    for (let i = 0; i < this.props.size; i++) {\n      columns.push(\n        <div className=\"board-row\" key={i}>\n          {this.renderColumns(i).map((row) => row)}\n        </div>\n      );\n    }\n    return columns;\n  }\n  render() {\n    return <div>{this.renderRows().map((value) => value)}</div>;\n  }\n}\n\nclass Game extends React.Component {\n  size;\n\n  constructor(props) {\n    super(props);\n    this.size = props.size;\n    this.state = {\n      history: [\n        {\n          squares: Array(this.size * this.size).fill(null),\n          currentMove: null,\n          order: 0,\n        },\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      wonSquares: [],\n      isSort: false,\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n          currentMove: i,\n          order: current.order + 1,\n        },\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n    });\n  }\n\n  sortMove() {\n    this.setState({\n      isSort: !this.state.isSort,\n    });\n  }\n  render() {\n    const history = [...this.state.history];\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    if (this.state.isSort) {\n      history.reverse();\n    }\n    const moves = history.map((step) => {\n      const move = step.order;\n      const desc = move\n        ? `Go to move #${move}: (${(step.currentMove % +this.props.size) + 1},${\n            parseInt(step.currentMove / this.props.size) + 1\n          })`\n        : \"Go to game start\";\n      return (\n        <li key={move}>\n          <button\n            onClick={() => this.jumpTo(move)}\n            className={move === this.state.stepNumber ? \"hightlight\" : null}\n          >\n            {desc}\n          </button>\n        </li>\n      );\n    });\n    let wonSquares;\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner.turn;\n      wonSquares = winner.squares;\n    } else {\n      if (current.squares.includes(null))\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n      else status = \"Draw\";\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            size={this.size}\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            wonSquares={wonSquares ?? []}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <div className=\"container\">\n            <div className=\"toggle-switch\">\n              <input\n                type=\"checkbox\"\n                className=\"checkbox\"\n                id=\"toggleButton\"\n                onChange={() => this.sortMove()}\n              />\n              <label className=\"label\" htmlFor=\"toggleButton\">\n                <span className=\"inner\" />\n                <span className=\"switch\" />\n              </label>\n            </div>\n          </div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      size: 5,\n      isStart: false,\n    };\n  }\n  handleSubmit = (e) => {\n    const { size } = this.state;\n    if (size < 5) {\n      return alert(\"Giá trị tối thiểu là 5\");\n    }\n    this.setState({ isStart: true });\n  };\n  render() {\n    const { size, isStart } = this.state;\n\n    return isStart ? (\n      <div>\n        <button\n          className=\"button\"\n          onClick={() => this.setState({ isStart: false })}\n        >\n          Quay về\n        </button>\n        <Game size={size} />\n      </div>\n    ) : (\n      <div>\n        <div>\n          <label htmlFor=\"row-input\">Nhập kích cỡ bàn cờ</label>\n          <input\n            id=\"row-input\"\n            type=\"number\"\n            value={size}\n            min={5}\n            placeholder=\"Nhập kích cỡ\"\n            onChange={(e) => this.setState({ size: e.target.value })}\n          />\n        </div>\n        <button className=\"button\" type=\"submit\" onClick={this.handleSubmit}>\n          Đồng ý\n        </button>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Map />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const size = parseInt(Math.sqrt(squares.length));\n  // check row\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size - 4; j++) {\n      let isWin = true;\n      const position = i * size + j;\n\n      if (!squares[position]) {\n        continue;\n      }\n      let wonSquares = [position];\n      for (let streak = 1; streak < 5; streak++) {\n        if (squares[position] !== squares[position + streak]) {\n          isWin = false;\n          break;\n        }\n        wonSquares.push(position + streak);\n      }\n      if (isWin) return { turn: squares[position], squares: wonSquares };\n      wonSquares = [];\n    }\n  }\n\n  // check column\n  for (let j = 0; j < size - 4; j++) {\n    for (let i = 0; i < size; i++) {\n      let isWin = true;\n      const position = j * size + i;\n\n      if (!squares[position]) {\n        continue;\n      }\n      let wonSquares = [position];\n      for (let streak = 1; streak < 5; streak++) {\n        if (squares[position] !== squares[position + streak * size]) {\n          isWin = false;\n          break;\n        }\n        wonSquares.push(position + streak * size);\n      }\n      if (isWin) return { turn: squares[position], squares: wonSquares };\n      wonSquares = [];\n    }\n  }\n\n  // primary diag\n  for (let position = 0; position < size * size; position++) {\n    let isWin = true;\n\n    if (!squares[position]) {\n      continue;\n    }\n    let wonSquares = [position];\n    for (let streak = 1; streak < 5; streak++) {\n      if (\n        position + streak * (size + 1) > squares.length || // check if it exceeds row\n        squares[position] !== squares[position + streak * (size + 1)]\n      ) {\n        isWin = false;\n        break;\n      }\n      wonSquares.push(position + streak * (size + 1));\n    }\n    if (isWin) return { turn: squares[position], squares: wonSquares };\n  }\n\n  // secondary diag\n  for (let position = 0; position < size * size; position++) {\n    let isWin = true;\n\n    // check if null or at column can't win\n    if (!squares[position] || position % size < 4) {\n      continue;\n    }\n\n    let wonSquares = [position];\n\n    for (let streak = 1; streak < 5; streak++) {\n      let nextPosition = position + streak * (size - 1);\n      if (nextPosition < 0 || squares[position] !== squares[nextPosition]) {\n        isWin = false;\n        break;\n      }\n\n      wonSquares.push(nextPosition);\n    }\n    if (isWin) return { turn: squares[position], squares: wonSquares };\n    wonSquares = [];\n  }\n\n  return null;\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}